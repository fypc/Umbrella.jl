var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Umbrella.jl supports different OAuth 2 providers, and it integrates with Julia web framework such as Genie.jl, Oxygen.jl or Mux.jl effortlessly, some examples to demo how it works.","category":"page"},{"location":"examples/#Integrate-with-Genie.jl","page":"Examples","title":"Integrate with Genie.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Great work Genie.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Genie, Genie.Router\nusing Umbrella, Umbrella.Google\n\nconst options = Configuration.Options(;\n    client_id=\"\", # client id from Google API Console\n    client_secret=\"\", # secret from Google API Console\n    redirect_uri = \"http://localhost:3000/oauth2/google/callback\",\n    success_redirect=\"/protected\",\n    failure_redirect=\"/failed\",\n    scopes = [\"profile\", \"openid\", \"email\"],\n    providerOptions = GoogleOptions(access_type=\"online\")\n)\n\ngoogle_oauth2 = init(:google, options)\n\nroute(\"/\") do\n    return \"<a href='/oauth2/google'>Authenticate with Google</a>\"\nend\n\nroute(\"/oauth2/google\") do\n    google_oauth2.redirect()\nend\n\nroute(\"/oauth2/google/callback\") do\n  code = Genie.params(:code, nothing)\n  function verify(tokens::Google.Tokens, user::Google.User)\n    # handle access and refresh tokens and user profile here\n  end\n  \n  google_oauth2.token_exchange(code, verify)\nend\n\nroute(\"/protected\") do\n    \"Congrets, You signed in Successfully!\"\nend\n\nup(3000, async=false)","category":"page"},{"location":"examples/#Integrate-with-Oxygen.jl","page":"Examples","title":"Integrate with Oxygen.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Shout out to Oxygen.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Oxygen, Umbrella, HTTP\n\nconst oauth_path = \"/oauth2/google\"\nconst oauth_callback = \"/oauth2/google/callback\"\n\nconst options = Configuration.Options(;\n    client_id=\"\", # client id from Google API Console\n    client_secret=\"\", # secret from Google API Console\n    redirect_uri=\"http://127.0.0.1:8080$(oauth_callback)\",\n    success_redirect=\"/protected\",\n    failure_redirect=\"/failed\",\n    scopes=[\"profile\", \"openid\", \"email\"]\n)\n\nconst google_oauth2 = Umbrella.init(:google, options)\n\n@get \"/\" function ()\n  return \"<a href='$(oauth_path)'>Authenticate with Google</a>\"\nend\n\n@get oauth_path function ()\n  # this handles the Google oauth2 redirect in the background\n  google_oauth2.redirect()\nend\n\n@get oauth_callback function (req)\n  query_params = queryparams(req)\n  code = query_params[\"code\"]\n\n  function verify(tokens::Google.Tokens, user::Google.User)\n    # handle access and refresh tokens and user profile here\n  end\n\n  google_oauth2.token_exchange(code, verify)\nend\n\n@get \"/protected\" function()\n  \"Congrets, You signed in Successfully!\"\nend\n\n# start the web server\nserve()","category":"page"},{"location":"examples/#Integrate-with-Mux.jl","page":"Examples","title":"Integrate with Mux.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Well done Mux.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mux, Umbrella, HTTP\n\nconst oauth_path = \"/oauth2/google\"\nconst oauth_callback = \"/oauth2/google/callback\"\n\nconst options = Configuration.Options(;\n    client_id=\"\", # client id from Google API Console\n    client_secret=\"\", # secret from Google API Console\n    redirect_uri=\"http://127.0.0.1:3000$(oauth_callback)\",\n    success_redirect=\"/protected\",\n    failure_redirect=\"/no\",\n    scopes=[\"profile\", \"openid\", \"email\"]\n)\n\nfunction mux_redirect(url::String, status::Int = 302)\n  headers = Dict{String, String}(\n    \"Location\" => url\n  )\n\n  Dict(\n    :status => status,\n    :headers => headers,\n    :body => \"\"\n  )\nend\n\nconst oauth2 = Umbrella.init(:google, options, mux_redirect)\n\nfunction callback(req)\n  params = HTTP.queryparams(req[:uri])\n  code = params[\"code\"]\n\n  oauth2.token_exchange(code, \n    function (tokens::Google.Tokens, user::Google.User)\n      println(tokens.access_token)\n      println(tokens.refresh_token)\n      println(user.email)\n    end\n  )\nend\n\n@app http = (\n  Mux.defaults,\n  page(\"/\", respond(\"<a href='$(oauth_path)'>Authenticate with Google</a>\")),\n  page(oauth_path, req -> oauth2.redirect()),\n  page(oauth_callback, callback),\n  page(\"/protected\", respond(\"Congrets, You signed in Successfully!\")),\n  Mux.notfound()\n)\n\nserve(http, 3000)","category":"page"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Configuration","page":"API Reference","title":"Configuration","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Configuration.Options\ninit\nregister","category":"page"},{"location":"reference/#Umbrella.Configuration.Options","page":"API Reference","title":"Umbrella.Configuration.Options","text":"Options(client_id, client_secret, redirect_uri, success_redirect, failure_redirect, scopes, state, providerOptions)\n\nRepresents an Configuration Options with fields:\n\nclient_id::String Client id from an OAuth 2 provider\nclient_secret::String Secret from an OAuth 2 provider\nredirect_uri::String Determines where the API server redirects the user after the user completes the authorization flow\nsuccess_redirect::String URL path when OAuth 2 successed\nfailure_redirect::String URL path when OAuth 2 failed\nscope::String OAuth 2 scopes\nstate::String Specifies any string value that your application uses to maintain state between your authorization request and the authorization server's response\n\n\n\n\n\n","category":"type"},{"location":"reference/#Umbrella.init","page":"API Reference","title":"Umbrella.init","text":"init(type::Symbol, config::Configuration.Options)\n\nInitiate an OAuth 2 instance for the given provider.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Umbrella.register","page":"API Reference","title":"Umbrella.register","text":"register(type::Symbol, oauth2_actions::OAuth2Actions)\n\nRegister a newly implemented OAuth 2 provider.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Handlers","page":"API Reference","title":"Handlers","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"OAuth2","category":"page"},{"location":"reference/#Umbrella.OAuth2","page":"API Reference","title":"Umbrella.OAuth2","text":"OAuth2(type, redirect, token_exchange)\n\nRepresents an OAuth2 with fields:\n\ntype::Symbol OAuth 2 provider\nredirect::Function Generates the redirect URL and redirects users to provider's OAuth 2 server to initiate the authentication and authorization process.\ntoken_exchange::Function Use code responded by the OAuth 2 server to exchange an access token, and get user profile using the access token.\n\nredirect and token_exchange functions are produced by init function, they are configured for a specific OAuth 2 provider, example usage:\n\nconst options = Configuration.Options(\n    # fill in the values\n)\nconst oauth2 = Umbrella.init(:google, options)\n\n# perform redirect\noauth2.redirect()\n\n# handle token exchange\noauth2.token_exchange(code, verify)\n\n\n\n\n\n","category":"type"},{"location":"reference/#OAuth-2-Providers","page":"API Reference","title":"OAuth 2 Providers","text":"","category":"section"},{"location":"#Umbrella","page":"Overview","title":"Umbrella","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Umbrella is a simple Julia authentication plugin, it supports Google and GitHub OAuth2 with more to come. Umbrella integrates with Julia web framework such as Genie.jl, Oxygen.jl or Mux.jl effortlessly.","category":"page"},{"location":"#Prerequisite","page":"Overview","title":"Prerequisite","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Before using the plugin, you need to obtain OAuth 2 credentials, see Google Identity Step 1, GitHub: Creating an OAuth App for details.","category":"page"},{"location":"#Installation","page":"Overview","title":"Installation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"pkg> add Umbrella","category":"page"},{"location":"#Basic-Usage","page":"Overview","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Many resources are available describing how OAuth 2 works, please advice OAuth 2.0, Google Identity, or GitHub OAuth 2 for details","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Follow the steps below to enable OAuth 2 in your application. ","category":"page"},{"location":"#.-Configuration","page":"Overview","title":"1. Configuration","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"OAuth 2 required parameters such as client_id, client_secret and redirect_uri need to be configured through Configuration.Options. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"scopes is a list of resources the application will access on user's behalf, it is vary from one provider to another.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"providerOptions configures the additional parameters at the redirection step, it is dependent on the provider.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"const options = Configuration.Options(;\n    client_id = \"\", # client id from an OAuth 2 provider\n    client_secret = \"\", # secret from an OAuth 2 provider\n    redirect_uri = \"http://localhost:3000/oauth2/google/callback\",\n    success_redirect = \"/protected\",\n    failure_redirect = \"/error\",\n    scopes = [\"profile\", \"openid\", \"email\"],\n    providerOptions = GoogleOptions(access_type=\"online\")\n)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"init function takes the provider and options, then returns an OAuth 2 instance. Available provider values are :google, :github and facebook. This list is growing as more providers are supported.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"oauth2_instance = init(:google, options)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The examples will use Oxygen.jl as the web framework, but the concept is the same for other web frameworks.","category":"page"},{"location":"#.-Handle-provider-redirection","page":"Overview","title":"2. Handle provider redirection","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Create two endpoints,","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"/ serve the login page which, in this case, is a Google OAuth 2 link.\n/oauth2/google handles redirections to an OAuth 2 server.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"@get \"/\" function ()\n  return \"<a href='/oauth2/google'>Authenticate with Google</a>\"\nend\n\n@get \"/oauth2/google\" function ()\n  oauth2_instance.redirect()\nend","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"redirect function generates the URL using the parameters in step 1, and redirects users to provider's OAuth 2 server to initiate the authentication and authorization process.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Once the users consent to grant access to one or more scopes requested by the application, OAuth 2 server responds the code for retrieving access token to a callback endpoint.","category":"page"},{"location":"#.-Retrieves-tokens","page":"Overview","title":"3. Retrieves tokens","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Finally, create the endpoint handling callback from the OAuth 2 server. The path must be identical to the path in redirect_uri from Configuration.Options.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"token_exchange function performs two actions,","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Use code responded by the OAuth 2 server to exchange an access token.\nGet user profile using the access token.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"A handler is required for access/refresh tokens and user profile handling.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"@get \"/oauth2/google/callback\" function (req)\n  query_params = queryparams(req)\n  code = query_params[\"code\"]\n\n  oauth2_instance.token_exchange(code, function (tokens, user)\n      # handle tokens and user profile here\n    end\n  )\nend","category":"page"}]
}
